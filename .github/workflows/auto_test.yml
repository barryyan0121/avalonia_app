name: Test Dotnet App
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest 
    
    concurrency:
      group: test-dotnet-app
      cancel-in-progress: true
    
    env:
      Solution_Name: AvaloniaApplication.sln
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/NuGet/Cache
          key: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x

      - name: Install Avalonia Templates
        run: dotnet new install Avalonia.Templates
        
      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}
        
      - name: Start MySQL container
        run: |
          docker run -d --name mysql-container -p 3306:3306 ${{ secrets.DOCKER_USERNAME }}/sample-mysql:latest
          
      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if docker exec mysql-container mysql -u sample_user -psample_password -e 'SELECT 1' sample_db &> /dev/null; then
              echo "MySQL is up and running"
              break
            fi
            echo 'Waiting for MySQL to be ready...'
            sleep 2
          done
          if [ "$i" = 0 ]; then
            echo "MySQL did not become ready in time."
            exit 1
          fi

      - name: Run tests
        run: |
          dotnet test ${{ env.Solution_Name }} --configuration Release

      - name: Stop and remove MySQL container
        if: always()
        run: |
          docker stop mysql-container
          docker rm mysql-container